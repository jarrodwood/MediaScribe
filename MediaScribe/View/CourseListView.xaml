<UserControl x:Class="JayDev.MediaScribe.View.CourseListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d"
             xmlns:nmControls="clr-namespace:JayDev.MediaScribe.View.Controls"
             xmlns:nmCommon="clr-namespace:JayDev.MediaScribe.Common;assembly=MediaScribe.Common"
             xmlns:nmCore="clr-namespace:JayDev.MediaScribe.Core"
             xmlns:nmConverters="clr-namespace:JayDev.MediaScribe.Converters"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"         
             xmlns:effect="clr-namespace:GrayscaleEffect;assembly=GrayscaleEffect"
             
             x:Name="CourseMaintenanceViewName"
             d:DesignHeight="1368" d:DesignWidth="1380">
    <UserControl.Resources>
        <nmConverters:GridLengthValueConverter x:Key="gridLengthConverter" />
        <nmConverters:BooleanToVisibilityConverter 
                x:Key="BooleanToVisibilityConverterFalseIsVisible" 
                True="Collapsed" 
                False="Visible" />
        <nmConverters:MaintenanceModeToVisibilityConverter 
                x:Key="MaintenanceModeConverter_NoneVisible" 
                VisibleValue="{x:Static nmCommon:MaintenanceMode.None}" />
        <nmConverters:MaintenanceModeToVisibilityConverter 
                x:Key="MaintenanceModeConverter_ViewVisible" 
                VisibleValue="{x:Static nmCommon:MaintenanceMode.View}" />
        <nmConverters:MaintenanceModeToVisibilityConverter 
                x:Key="MaintenanceModeConverter_CreateVisible" 
                VisibleValue="{x:Static nmCommon:MaintenanceMode.Create}" />
        <nmConverters:MaintenanceModeToVisibilityConverter 
                x:Key="MaintenanceModeConverter_EditVisible" 
                VisibleValue="{x:Static nmCommon:MaintenanceMode.Edit}" />
        <Style x:Key="HeaderFont" TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize" Value="16" />
        </Style>
        <Style x:Key="BoldFont" TargetType="{x:Type TextBlock}">
            <Setter Property="FontWeight" Value="Bold" />
        </Style>
        <Style TargetType="{x:Type nmControls:DoubleClickableDataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}" />
        <Style TargetType="{x:Type nmControls:DragEnabledDataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}" />
    </UserControl.Resources>
    <Grid Name="mainGrid" MaxWidth="1200">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="5*"/>
            <ColumnDefinition Width="5px"/>
            <ColumnDefinition Width="3*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <GroupBox Grid.Row="0" Grid.ColumnSpan="3" Header="Welcome to MediaScribe!"  Foreground="#FF3F3F3F" BorderBrush="#FF75B2AE" BorderThickness="0.9" Margin="10 10 10 10" Padding="10">
            <TextBlock TextWrapping="Wrap">
                        To get started, create a course in the list below, by clicking in the + button. You can type in a name,
                        select the tracks for the course (MediaScribe supports virtually any type of video or audio files), then once
                        you save you can click on the 'Go To Course' button to begin writing notes for your course.
                        <LineBreak />
                        <LineBreak />
                        You may also want to check out the 'Settings' in the menu above - you can configure a variety of hotkeys to
                        allow for quicker note writing, quick-seeking (i.e. jumping back a few seconds to repeat what was just said)
                        and also to style your notes with bolding, italics, and user-defined colours.
                        <LineBreak />
                        <LineBreak />
                        This is a pre-release version of the app, and while the core functionality is here, there <Italic>are</Italic>
                        bugs and many features which are yet to be implemented. Please write suggestions to jwood@galt.co.nz. Cheers!
            </TextBlock>
        </GroupBox>

        <GroupBox VerticalAlignment="Top" Grid.Row="1" Grid.Column="0" Header="Courses" Foreground="#FF3F3F3F" BorderBrush="#FF75B2AE" BorderThickness="0.9" Margin="10 0 10 10" Padding="5">

            <DockPanel VerticalAlignment="Top" LastChildFill="True">
                <!-- make the border the same colour as the grid's border... we want to make it look like an extension of the grid. -->
                <StackPanel DockPanel.Dock="Bottom">
                    <Border BorderThickness="1 0 1 1" BorderBrush="#A3AEB9" Background="#FFFF" Visibility="{Binding AreCoursesExisting, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterFalseIsVisible}, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}">
                        <StackPanel MinHeight="30">
                            <TextBlock Text="Please add a new course!" Margin="0 5 0 0" HorizontalAlignment="Center"  VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" MinHeight="30">


                        <Button Command="{Binding DeleteCourseCommand}"
                                ToolTip="Delete selected course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                            <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_minus}" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button>

                        <Button Command="{Binding CreateCourseCommand}"
                                ToolTip="Create new course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                            <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_add}" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button>


                        <Button Margin="10 0 0 0" Command="{Binding ImportCourseCommand}">Import Course</Button>


                        <!--<nmControls:ImageButton MySource="/MediaScribe;component/Images/list-add-7.png" Height="24" Width="24" Command="{Binding CreateCourseCommand}" />

                            <nmControls:ImageButton MySource="/MediaScribe;component/Images/list-remove-6.png" Height="24" Width="24" Command="{Binding DeleteCourseCommand}" CommandParameter="{x:Static nmCommon:NavigateMessage.ListCourses}" />-->

                    </StackPanel>
                </StackPanel>
                <nmControls:DoubleClickableDataGrid VerticalAlignment="Top" AutoGenerateColumns="False" x:Name="courseGrid" HeadersVisibility="Column" CanUserAddRows="False"                                                                 
                        SelectionMode="Single"
                        CanUserSortColumns="True" CanUserReorderColumns="False" CanUserResizeRows="False"
                        ItemsSource="{Binding Courses}"
                        SelectedItem="{Binding SelectedCourse, Mode=TwoWay}"
                        RowDoubleClickCommand="{Binding WriteNotesCommand}">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Course Name"
                                Width="*"
                                Binding="{Binding Name}" 
                                SortMemberPath="Name"
                                CanUserSort="True"
                                IsReadOnly="True"/>
                        <DataGridTextColumn Header="Length"
                                Width="55"
                                Binding="{Binding CourseLength}" 
                                SortMemberPath="CourseLength"
                                CanUserSort="True"
                                IsReadOnly="True"/>
                        <DataGridTextColumn Header="Files"
                                Width="55"
                                Binding="{Binding Path=Tracks.Count}" 
                                SortMemberPath="Tracks.Count"
                                CanUserSort="True"
                                IsReadOnly="True">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="TextBlock.HorizontalAlignment" Value="Right" />
                                    <Setter Property="Padding" Value="0 0 3 0" />
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Notes"
                                Width="55"
                                Binding="{Binding Path=Notes.Count}" 
                                SortMemberPath="Notes.Count"
                                CanUserSort="True"
                                IsReadOnly="True">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="TextBlock.HorizontalAlignment" Value="Right" />
                                    <Setter Property="Padding" Value="0 0 3 0" />
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Date Created"
                                Width="140"
                                Binding="{Binding Path=DateCreated}" 
                                SortMemberPath="DateCreated"
                                CanUserSort="True"
                                IsReadOnly="True"/>
                        <DataGridTextColumn Header="Last Viewed"
                                Width="140"
                                Binding="{Binding Path=DateViewed}" 
                                SortMemberPath="DateViewed"
                                CanUserSort="True"
                                IsReadOnly="True"/>
                    </DataGrid.Columns>
                </nmControls:DoubleClickableDataGrid>
            </DockPanel>
        </GroupBox>

        <GridSplitter Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" />

        <GroupBox VerticalAlignment="Top" Grid.Row="1" Grid.Column="2" Header="Selected Course" Foreground="#FF3F3F3F" BorderBrush="#FF75B2AE" BorderThickness="0.9" Margin="10 0 10 10" Padding="5">
            <Grid>


                <!-- The XAML for 'when no course is selected' panel -->
                <StackPanel Name="_noneCoursePanel" Visibility="{Binding MaintenanceMode, Mode=OneWay, Converter={StaticResource MaintenanceModeConverter_NoneVisible}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}">
                    <TextBlock HorizontalAlignment="Center" Style="{StaticResource HeaderFont}" xml:space="preserve" FontSize="12" Text="Please select a course on the left." />
                </StackPanel>

                <!-- The XAML for the 'view a course' panel -->
                <DockPanel Name="_viewCoursePanel" LastChildFill="True" Visibility="{Binding MaintenanceMode, Mode=OneWay, Converter={StaticResource MaintenanceModeConverter_ViewVisible}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}"
                           VerticalAlignment="Top">

                    <TextBlock DockPanel.Dock="Top" HorizontalAlignment="Center" Style="{StaticResource HeaderFont}" xml:space="preserve" Text="{Binding SelectedCourseName, TargetNullValue='no name?'}" />

                    <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal"  VerticalAlignment="Top" HorizontalAlignment="Center" MinHeight="30">
                        <Button Padding="5 1" Command="{Binding MaintenanceModeEditCommand}">Edit</Button>
                        <Button Margin="10 0 0 0" Padding="5 1" Command="{Binding ExportExcelCommand}">Export To Excel</Button>
                        <Button Margin="10 0 0 0" Padding="5 1" Command="{Binding ExportCourseCommand}">Share/Export Course</Button>
                        <Button Margin="10 0 0 0" Padding="5 1" Command="{Binding WriteNotesCommand}">Go To Course</Button>
                    </StackPanel>
                    
                    <nmControls:DragEnabledDataGrid VerticalAlignment="Top"
                                                    SelectionMode="Extended"
                                                                        AutoGenerateColumns="False" HeadersVisibility="All" CanUserAddRows="False"
                                        CanUserSortColumns="False" CanUserReorderColumns="False" CanUserResizeRows="False" ItemsSource="{Binding SelectedCourseTracks, Mode=TwoWay}"
                                                                        OnDragDisplayPropertyName="StringDisplayValue"
                                                                        CanDrag="False"
                                                                        ReadOnlySelectedItems="{Binding SelectedCourseSelectedTracks, Mode=OneWayToSource}"
                                                                        MoveItemsCommand="{Binding Path=MoveItemsCommand}"
                                                                        nmCore:DataGridExtensions.ShowRowNumbersInHeader="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name"
                                        Width="*"
                                        Binding="{Binding StringDisplayValue}" 
                                        IsReadOnly="True"/>
                            <DataGridTextColumn Header="Length"
                                        Width="55"
                                        Binding="{Binding Length}" 
                                        IsReadOnly="True"/>
                        </DataGrid.Columns>
                        <DataGrid.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Style.Triggers>
                                    <!--TODO: this code block is used several times; move into staticresource-->
                                    <DataTrigger Binding="{Binding Path=IsMissing, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Foreground">
                                            <Setter.Value>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FFFF2E05" Offset="0"/>
                                                    <GradientStop Color="#FFFF0515" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ToolTip" Value="Track cannot be found" />
                                        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
                                        <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                        <Setter Property="ToolTipService.HasDropShadow" Value="True" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.CellStyle>
                    </nmControls:DragEnabledDataGrid>

                </DockPanel>


                <!-- The XAML for the 'create a course' panel -->
                <DockPanel VerticalAlignment="Top" LastChildFill="True"  Name="_createCoursePanel" Visibility="{Binding MaintenanceMode, Mode=OneWay, Converter={StaticResource MaintenanceModeConverter_CreateVisible}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}">
                        <TextBox DockPanel.Dock="Top" VerticalAlignment="Center" HorizontalAlignment="Stretch" Text="{Binding SelectedCourseName, UpdateSourceTrigger=PropertyChanged}"
                                  nmCore:TextBoxAttached.IsFocused="{Binding IsCreateCourseNameTextboxFocused, Mode=TwoWay}">
                            <nmCore:WatermarkService.Watermark>
                                <TextBlock>Course name...</TextBlock>
                            </nmCore:WatermarkService.Watermark>
                    </TextBox>
                    <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 15 0 0">
                        <Button Command="{Binding CancelCommand}" Padding="5 1">Cancel</Button>
                        <Button Padding="5 1" Margin="10 0 0 0" Command="{Binding SaveCourseCommand}">Save</Button>
                    </StackPanel>
                    <StackPanel DockPanel.Dock="Bottom">
                                <!-- make the border the same colour as the grid's border... we want to make it look like an extension of the grid. -->
                                <Border BorderThickness="1 0 1 1" BorderBrush="#A3AEB9" Background="#FFFF"   Visibility="{Binding AreTracksExistingInSelectedCourse, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterFalseIsVisible}, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}">
                                    <StackPanel MinHeight="30">
                                        <TextBlock Margin="0 5 0 0"  Text="Please add some tracks!" HorizontalAlignment="Center" VerticalAlignment="Bottom" />
                                    </StackPanel>
                                </Border>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" MinHeight="30">


                                    <Button Command="{Binding DeleteTracksCommand}"
                                            CommandParameter="{Binding ElementName=CourseCreatePanelName, Path=DeleteTracksCommandParameter}"
                                ToolTip="Remove selected tracks from the course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                                        <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_minus}" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                    </Button>

                                    <Button Command="{Binding AddTracksCommand}"
                                ToolTip="Add tracks to the course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                                        <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_add}" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                    </Button>

                                </StackPanel>
                    </StackPanel>
                    <nmControls:DragEnabledDataGrid VerticalAlignment="Top"
                                                                        AutoGenerateColumns="False"  x:Name="trackGrid" HeadersVisibility="Column" CanUserAddRows="False"
                        CanUserSortColumns="False" CanUserReorderColumns="False" CanUserResizeRows="False" ItemsSource="{Binding SelectedCourseTracks, Mode=TwoWay}"
                                                                        OnDragDisplayPropertyName="StringDisplayValue"
                                                                        CanDrag="True"
                                                                        ReadOnlySelectedItems="{Binding SelectedCourseSelectedTracks, Mode=OneWayToSource}"
                                                                        MoveItemsCommand="{Binding Path=MoveItemsCommand}" 
                                                                        nmCore:DataGridExtensions.ShowRowNumbersInHeader="False">
                                <DataGrid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Remove Track" Command="Delete" />
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                                <!--<i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDoubleClick">
                                        <cmd:EventToCommand Command="{Binding SelectTrackCommand,Mode=OneWay}"
                                        CommandParameter="{Binding SelectedItem, ElementName=trackGrid, Mode=OneWay}"
                                        MustToggleIsEnabledValue="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>-->
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Name"
                                        Width="*"
                                        Binding="{Binding StringDisplayValue}" 
                                        IsReadOnly="True"/>
                                    <DataGridTextColumn Header="Length"
                                        Width="55"
                                        Binding="{Binding Length}" 
                                        IsReadOnly="True"/>
                                </DataGrid.Columns>
                            </nmControls:DragEnabledDataGrid>
                </DockPanel>


                <!-- The XAML for the 'edit a course' panel -->
                <DockPanel Name="_editCoursePanel" Visibility="{Binding MaintenanceMode, Mode=OneWay, Converter={StaticResource MaintenanceModeConverter_EditVisible}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}">
                    <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                        <TextBox HorizontalAlignment="Center" VerticalAlignment="Center" Width="300" Text="{Binding SelectedCourseName, UpdateSourceTrigger=PropertyChanged}" />
                    </StackPanel>
                    <DockPanel Margin="0 15 0 0">
                        <StackPanel DockPanel.Dock="Bottom">
                            <!-- make the border the same colour as the grid's border... we want to make it look like an extension of the grid. -->
                            <Border BorderThickness="1 0 1 1" BorderBrush="#A3AEB9" Background="#EAEAEA"  Visibility="{Binding AreTracksExistingInSelectedCourse, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterFalseIsVisible}, UpdateSourceTrigger=PropertyChanged, FallbackValue=Visible}" >
                                <StackPanel MinHeight="30">
                                    <TextBlock Margin="0 5 0 0"  Text="Please add some tracks!" HorizontalAlignment="Center" VerticalAlignment="Bottom" />
                                </StackPanel>
                            </Border>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" MinHeight="30">



                                <Button Command="{Binding DeleteTracksCommand}"
                                            CommandParameter="{Binding ElementName=CourseCreatePanelName, Path=DeleteTracksCommandParameter}"
                                ToolTip="Remove selected tracks from the course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                                    <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_minus}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                </Button>

                                <Button Command="{Binding AddTracksCommand}"
                                ToolTip="Add tracks to the course"
                        Width="25"
                        Height="25"
                        Style="{DynamicResource MetroCircleButtonStyle}">
                                    <Rectangle Width="10"
                               Height="10"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform"
                                         Visual="{StaticResource appbar_add}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                </Button>

                            </StackPanel>
                        </StackPanel>
                        <nmControls:DragEnabledDataGrid VerticalAlignment="Top"
                                                                        AutoGenerateColumns="False" HeadersVisibility="Column" CanUserAddRows="False"
                        CanUserSortColumns="False" CanUserReorderColumns="False" CanUserResizeRows="False" ItemsSource="{Binding SelectedCourseTracks, Mode=TwoWay}"
                                                                        OnDragDisplayPropertyName="StringDisplayValue"
                                                                        CanDrag="True"
                                                                        ReadOnlySelectedItems="{Binding SelectedCourseSelectedTracks, Mode=OneWayToSource}"
                                                                        MoveItemsCommand="{Binding Path=MoveItemsCommand}"
                                                                            nmCore:DataGridExtensions.ShowRowNumbersInHeader="False">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Remove Track" Command="Delete" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <!--<i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDoubleClick">
                                        <cmd:EventToCommand Command="{Binding SelectTrackCommand,Mode=OneWay}"
                                        CommandParameter="{Binding SelectedItem, ElementName=trackGrid, Mode=OneWay}"
                                        MustToggleIsEnabledValue="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>-->
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Name"
                                        Width="*"
                                        Binding="{Binding StringDisplayValue}" 
                                        IsReadOnly="True"/>
                                <DataGridTextColumn Header="Length"
                                        Width="55"
                                        Binding="{Binding Length}" 
                                        IsReadOnly="True"/>
                            </DataGrid.Columns>
                            <DataGrid.CellStyle>
                                <Style TargetType="DataGridCell">
                                    <Style.Triggers>
                                        <!--TODO: this code block is used several times; move into staticresource-->
                                        <DataTrigger Binding="{Binding Path=IsMissing, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Foreground">
                                                <Setter.Value>
                                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                        <GradientStop Color="#FFFF2E05" Offset="0"/>
                                                        <GradientStop Color="#FFFF0515" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="ToolTip" Value="Track cannot be found" />
                                            <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
                                            <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                            <Setter Property="ToolTipService.HasDropShadow" Value="True" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGrid.CellStyle>
                        </nmControls:DragEnabledDataGrid>
                    </DockPanel>
                    <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 15 0 0">
                        <Button Padding="5 1" Command="{Binding SaveCourseCommand}">Save</Button>
                        <Button Margin="10 0 0 0" Command="{Binding CancelCommand}" Padding="5 1">Cancel</Button>
                    </StackPanel>
                </DockPanel>

            </Grid>

        </GroupBox>

    </Grid>
</UserControl>